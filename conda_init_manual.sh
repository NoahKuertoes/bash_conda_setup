#!/bin/bash
# 0. confirm that we are operating in windows
OS=$(uname -s)
case "$OS" in
    Linux*) OS="Linux";;
    Darwin*) OS="macOS";;
    CYGWIN*|MINGW*) OS="Windows";;
    *) echo "Unsupported operating system: $OS"; exit 1;;
esac
echo "----------------------------"
echo "Detected OS: $OS"

# 1.) check if anaconda is present in the current home directory
if [ ! -d "$HOME/Anaconda3" ] && [ ! -d "$HOME/anaconda3" ]; then
    echo "Neither Anaconda3 nor anaconda3 exists in $HOME"
    exit 0
fi

# 1.1 check directory case
if [ -d "$HOME/Anaconda3" ]; then
    NAME="Anaconda3"
fi

if [ -d "$HOME/anaconda3" ]; then
    NAME="anaconda3"
fi
echo "----------------------------"
# 2. check if name is ASCII conform 
# 2.1 if not get user shortname
if [[ "$OS" == "Windows" ]]; then
    # In Windows, ASCII non-conform usernames can become problematic for PowerShell
    output=$(source check_ascii.sh "$(basename "$HOME")")

    case "$output" in
        "CONFIRM")
            INSTDIR="$HOME"
            ;;
        "OTHER")
            echo -e "ATTENTION! \t $HOME contains non-ASCII conform characters:"
            INSTDIR=$(powershell.exe -File ./get_shortname.ps1 "$HOME")
            echo -e "SHORTNAME \t $INSTDIR"
            echo -e "grabbing SHORTNAME directory for conda initiation"
            ;;
        *)
            echo "Unrecognized output: $output"
            exit 0
            ;;
    esac
fi

#APPEND anaconda OR Anaconda to instdir
INSTDIR=$INSTDIR/$NAME

echo "----------------------------"
# 3. Modify files
# 3.1 bashrc
CONDA_INIT_BLOCK=$(cat << EOF
# generated by Git for Windows
test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if [ -f "$INSTDIR/Scripts/conda.exe" ]; then
    eval "\$($INSTDIR/Scripts/conda.exe 'shell.bash' 'hook')"
fi
# <<< conda initialize <<<
EOF
)

# File to modify (.bashrc)
BASHRC_FILE="$HOME/.bashrc"

# Overwrite the .bashrc file with the Conda initialization block
echo "$CONDA_INIT_BLOCK" > "$BASHRC_FILE"

echo ">> .bashrc file has been overwritten with the Conda initialization block."

#3.2 conda-hook.ps1
# Format $INSTDIR to Windows-style backslashes
INSTDIR_WINDOWS=$(echo "$INSTDIR" | sed 's|/|\\|g')

# Define the file to be written or overwritten
CONDA_HOOK_FILE="$INSTDIR/shell/condabin/conda-hook.ps1"

# Write out the PowerShell script with $INSTDIR hardcoded
cat <<EOL > "$CONDA_HOOK_FILE"
\$Env:CONDA_EXE = "${INSTDIR_WINDOWS}\\Scripts\\conda.exe"
\$Env:_CE_M = ""
\$Env:_CE_CONDA = ""
\$Env:_CONDA_ROOT = "${INSTDIR_WINDOWS}"
\$Env:_CONDA_EXE = "${INSTDIR_WINDOWS}\\Scripts\\conda.exe"
\$CondaModuleArgs = @{ChangePs1 = \$True}
Import-Module "\$Env:_CONDA_ROOT\\shell\\condabin\\Conda.psm1" -ArgumentList \$CondaModuleArgs

Remove-Variable CondaModuleArgs
EOL

echo ">> conda.hook.ps1 has been overwritten with <$INSTDIR> hardcoded."

# 3.3 Write the PowerShell profile.ps1 initialization script
USER=$(powershell.exe -File ./get_shortname.ps1 "$HOME")
PS1_PATH="$USER/Documents/WindowsPowerShell/profile.ps1"

# Write the PowerShell profile script with the correct Conda initialization
cat <<EOL > "$PS1_PATH"
# Manually initializing Conda in PowerShell

# Set the path to your Conda installation
\$condaPath = "$INSTDIR_WINDOWS"

# Ensure that Conda's binary and necessary scripts are added to the PATH
\$Env:PATH = "\$condaPath\\condabin;\$Env:PATH"

# Initialize Conda hook (invoke conda-hook.ps1)
if (Test-Path "\$condaPath\\shell\\condabin\\conda-hook.ps1") {
    & "\$condaPath\\shell\\condabin\\conda-hook.ps1"
} else {
    Write-Host "conda-hook.ps1 not found at \$condaPath\\shell\\condabin"
}

# Initialize Conda's PowerShell module
Import-Module "\$condaPath\\shell\\condabin\\Conda.psm1" -Force

# Optional: Auto-activate the base Conda environment when PowerShell starts
if (Get-Command conda -ErrorAction SilentlyContinue) {
    conda activate
} else {
    Write-Host "Conda command not found. Please check your Conda installation."
}

# Prevent duplicate imports (if necessary)
if (Test-Path Function:\\conda) {
    Remove-Item Function:\\conda
}
EOL


echo ">> profile.ps1 has been written to $PS1_PATH with Conda initialization."

echo "----------------------------"
# 4. Add profile.ps1 to PowerShell autostart by modifying the system PATH
# Add the WindowsPowerShell folder to the PATH if not already present
POWERSHELL_PATH="$INSTDIR_WINDOWS\\Documents\\WindowsPowerShell"

if [[ ":$Env:PATH:" != *":$POWERSHELL_PATH:"* ]]; then
    echo "Adding $POWERSHELL_PATH to PATH..."
    powershell.exe -Command "[System.Environment]::SetEnvironmentVariable('PATH', \$Env:PATH + ';$POWERSHELL_PATH', 'User')"
    echo "Path updated. PowerShell profile.ps1 will now auto-start."
else
    echo "$POWERSHELL_PATH is already in the PATH."
fi

